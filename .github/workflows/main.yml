# Set the name of your workflow
name: IOSBuilder

# Controls when the action will run.
# [workflow_dispatch] --> allows to run the workflow manually
# you may use the following to build on each push
# on:
# push:
# branches: [ master ]
on: [workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # In this workflow we use a single job called "build"
  build:
    # The type of runner ie, the OS that the job will run on. apart from mac windows and ubuntu are also available
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so our job can access it
     - uses: actions/checkout@v2
       with: 
          ref: ios

     - name: Create Folder for certificates and profiles
       run: |
         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
         mkdir -p ~/Library/MobileDevice/Certificates/
       
       # decode and save the p12 and provisioning files stored as secrets
     - name: Get Certificate
       id: certFileDecode
       uses: timheuer/base64-to-file@v1.0.3
       with:
        fileName: 'certificate.p12'
        encodedString: ${{ secrets.P12_BASE64 }}
     - name: Copy Certificate
       run: mv ${{ steps.certFileDecode.outputs.filePath }} ~/Library/MobileDevice/Certificates/certificate.p12
       
     - name: Get Profile
       id: profFileDecode
       uses: timheuer/base64-to-file@v1.0.3
       with:
        fileName: 'decoded.mobileprovision'
        encodedString: ${{ secrets.MOBILEPROVISION_BASE64 }}
     - name: Copy Profiles
       run: mv ${{ steps.profFileDecode.outputs.filePath }} ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

#install the necessary dependencies
     - name: Install python and codemagic tools
       uses: actions/setup-python@v2
       with:
         python-version: 3.7
     - name: Install python dependencies
       run:  python -m pip install codemagic-cli-tools
         
    
#install flutter
     - name: cocoapods get
       uses: CocoaPods/CocoaPods@1.11.3
     - run: pod install --repo-update

#build and sign the ipa
     - name: Building IPA
       run: |
       set -ue

BASE_DIR=$(cd "$(dirname "$0")" ; pwd -P)

usage () {
    echo " Usage: ${0} <release|dev-release|debug> [--dry-run]"
    echo ""
    echo " This script can be used to create various Psiphon iOS VPN builds for different distribution platforms. I.E. app store, testflight and internal testing."
    exit 1
}

setup_env () {
    cd "${BASE_DIR}"

    PSIPHON_IOS_VPN_XCODE_WORKSPACE="${BASE_DIR}"

    # The location of the final build
    BUILD_DIR="${PSIPHON_IOS_VPN_XCODE_WORKSPACE}/build/${TARGET_DISTRIBUTION_PLATFORM}"

    # Clean previous output
    rm -rf "${BUILD_DIR}"

    if ! [ -x "$(command -v xcrun)" ]; then
        echo "Error: 'xcrun' is not installed"
        exit 1
    fi
}

build () {
    # Install pods
    pod install --repo-update

    # Build
    if ! xcodebuild -workspace "${PSIPHON_IOS_VPN_XCODE_WORKSPACE}/Psiphon.xcworkspace" -scheme Psiphon -sdk iphoneos -configuration "${CONFIGURATION}" archive -archivePath "${BUILD_DIR}/Psiphon.xcarchive";
    then
        echo "xcodebuild failed. Failed to create Psiphon.xcarchive, aborting..."
        exit 1
    fi
    
    if ! xcodebuild -exportArchive -archivePath "${BUILD_DIR}/Psiphon.xcarchive" -exportOptionsPlist "${PSIPHON_IOS_VPN_XCODE_WORKSPACE}/${EXPORT_OPTIONS_PLIST}" -exportPath "${BUILD_DIR}";
    then
        echo "xcodebuild failed. Failed to export Psiphon.xcarchive, aborting..."
        exit 1
    fi

    # Jenkins loses symlinks from the framework directory, which results in a build
    # artifact that is invalid to use in an App Store app. Instead, we will zip the
    # resulting build and use that as the artifact.
    cd "${BUILD_DIR}"
    zip --recurse-paths --symlinks build.zip ./* --exclude "*.DS_Store"

    echo "BUILD DONE"
}

#upload_ipa () {
    #echo "Validating exported ipa..."
    #if ! xcrun altool --validate-app -t ios -f "${BUILD_DIR}/Psiphon.ipa" -u "${ITUNES_CONNECT_USERNAME}" -p "${ITUNES_CONNECT_PASSWORD}";
    #then
    #    echo "Psiphon.ipa failed validation, aborting..."
        exit 1
    #fi

    #echo "Uploading validated ipa to TestFlight..."
    #if ! xcrun altool --upload-app -t ios -f "${BUILD_DIR}/Psiphon.ipa" -u "${ITUNES_CONNECT_USERNAME}" -p "${ITUNES_CONNECT_PASSWORD}";
    #then
    #    echo "Failed to upload Psiphon.ipa, aborting..."
    #    exit 1
    #fi
}

# If $1 is unset or null, prints usage.
# More information on parameter expansion: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02
if [ -z "${1:-}" ]; then
    usage 
fi

TARGET_DISTRIBUTION_PLATFORM="$1"

# if $2 is unset or null, sets DRY_RUN to false,
# otherwise if it is set to "--dry-run", sets DRY_RUN to true,
# otherwise it is incorrect usage.
if [ -z "${2:-}" ]; then
    DRY_RUN=false
elif [ "$2" = "--dry-run" ]; then
    DRY_RUN=true
else
    usage
fi

# Option parsing
case $TARGET_DISTRIBUTION_PLATFORM in
    release)
        CONFIGURATION="Release"
        EXPORT_OPTIONS_PLIST="exportAppStoreOptions.plist"
        setup_env
        build

        if [ "$DRY_RUN" = false ]; then
            upload_ipa
        fi

        ;;
    dev-release)
        CONFIGURATION="DevRelease"
        EXPORT_OPTIONS_PLIST="exportAppStoreOptions.plist"
        setup_env
        build

        if [ "$DRY_RUN" = false ]; then
            upload_ipa
        fi

        ;;
    debug)
        CONFIGURATION="Debug"
        EXPORT_OPTIONS_PLIST="exportDevelopmentOptions.plist"
        setup_env
        build
        ;;
    *)
        usage
        ;;
esac


# xcode-project use-profiles
# xcode-project build-ipa --workspace ios/Runner.xcworkspace --scheme Runner --config Release
#collect the files            
     - name: collect ipa artifacts
       uses: actions/upload-artifact@v2
       with:
        name: adhoc-ipa
        # Path to the release files
        path: build/ios/ipa/*.ipa
